pub enum DataBase{

    None,
    Some(<HashMap<GeneralizedNimGame, u16>>)
}

impl DataBase{

    pub fn get(&self, g: &GeneralizedNimGame) -> Option<u16>{
        match &self.map{
            Some(map) => map.get(g).copied(),
            None => None,
        }
    }
    pub fn set(&mut self, g: &GeneralizedNimGame, nimber: u16){
        if self.is_none() {self.generate();}

        let map = self.map.as_mut().unwrap();
        map.insert(g.clone(), nimber);

    }
    pub fn none() -> DataBase{
        return DataBase{map: None};
    }
    pub fn generate(&mut self){
        self.map = Some(HashMap::new());
    }
    pub fn is_none(&self) -> bool{
        return self.map.is_none();
    }
}
impl Display for DataBase{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        

        let mut str = String::from("");

        for key_value_pair in self.map.as_ref().unwrap(){

            let (g, nimber) = key_value_pair;

            str.push_str(&g.to_string());
            str.push_str("\nnimber:");
            str.push_str(&nimber.to_string());
            str.push_str("\n----------------------")
        }

        write!(f, "{}", str)
    }
}
